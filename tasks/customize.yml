---
- name: Update nifi.properties
  lineinfile:
    path: "{{ nifi_config_dirs.home }}/conf/nifi.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key }}="
  with_dict: "{{ nifi_properties }}"
  notify: restart_nifi

- name: Update bootstrap.conf
  lineinfile:
    path: "{{ nifi_config_dirs.home }}/conf/bootstrap.conf"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key }}="
  with_dict: "{{ bootstrap }}"
  notify: restart_nifi

- name: Update nifi-env.sh
  lineinfile:
    path: "{{ nifi_config_dirs.home }}/bin/nifi-env.sh"
    line: "export {{ item.key }}={{ item.value }}"
    regexp: "^export {{ item.key }}="
  with_dict: "{{ nifi_env }}"
  notify: restart_nifi

- name: Update state-management.xml
  xml:
    path: "{{ nifi_config_dirs.home }}/conf/state-management.xml"
    xpath: "{{ item.key }}"
    value: "{{ item.value }}"
    pretty_print: yes
  with_dict: "{{ state_management }}"
  notify: restart_nifi

- name: Update logback.xml
  xml:
    path: "{{ nifi_config_dirs.home }}/conf/logback.xml"
    xpath: "{{ item.key }}"
    value: "{{ item.value }}"
    pretty_print: yes
  with_dict: "{{ logback }}"
  notify: restart_nifi

- name: Update login-identity-providers.xml
  block:
    - name: Seed login-identity-providers.xml
      template:
        src: "templates/login-identity-providers.xml.j2"
        dest: "{{ nifi_config_dirs.home }}/conf/login-identity-providers.xml"
    - name: Add properties to login-identity-providers.xml
      xml:
        path: "{{ nifi_config_dirs.home }}/conf/login-identity-providers.xml"
        xpath: "{{ item.key }}"
        value: "{{ item.value }}"
        pretty_print: yes
      with_dict: "{{ login_identity_providers }}"
      notify: restart_nifi
  when: login_identity_providers | length

- name: Update authorizers.xml
  block:
    - name: Seed authorizers.xml
      template:
        src: "templates/authorizers.xml.j2"
        dest: "{{ nifi_config_dirs.home }}/conf/authorizers.xml"
    - name: Add properties to authorizers.xml
      xml:
        path: "{{ nifi_config_dirs.home }}/conf/authorizers.xml"
        xpath: "{{ item.key }}"
        value: "{{ item.value }}"
        pretty_print: yes
      with_dict: "{{ authorizers }}"
      notify: restart_nifi
  when: authorizers | length

- name: Prepare Zookeeper
  include: zookeeper.yml
  when:
    - nifi_properties['nifi.state.management.embedded.zookeeper.start'] is defined
    - nifi_properties['nifi.state.management.embedded.zookeeper.start'] | bool
  notify: restart_nifi

- name: update bootstrap-aws.conf
  lineinfile:
    path: "{{ nifi_config_dirs.home }}/conf/bootstrap-aws.conf"
    regexp: "^{{ item.key }}="
    line: "{{ item.key }}={{ item.value }}"
  loop:
    - { key: "aws.kms.key.id", value: "{{ aws_kms_key_id }}" }
    - { key: "aws.region", value: "{{ aws_region }}" }

- name: Check if keystore and trustore files exist
  stat:
    path: "{{ STORE_PATH }}/{{ item }}"
  register: file_stat
  with_items:
    - "{{ KEYSTORE_NAME }}.jks"
    - "{{ TRUSTORE_NAME }}.jks"
  #    - "/root/.ansible/roles/ansible-role-nifi/tasks/certificate-export-script.sh"
  vars:
    KEYSTORE_NAME: "{{ keystore_name }}"
    TRUSTORE_NAME: "{{ trustore_name }}"
    STORE_PATH: "{{ store_path }}"

- name: Export certificate and create keystore if files do not exist
  shell: "bash /root/.ansible/roles/ansible-role-nifi/tasks/certificate-export-script.sh"
  environment:
    REGION: "{{ aws_region }}"
    KEYSTORE_NAME: "{{ keystore_name }}"
    TRUSTORE_NAME: "{{ trustore_name }}"
    STORE_PATH: "{{ store_path }}"
    DOMAIN_NAME: "{{ domain_name }}"
    CERTIFICATE_ARN: "{{ certificate_arn }}"
    KEYSTORE_PASSWORD: "{{ KEYSTORE_PASSWORD }}"
    TRUSTORE_PASSWORD: "{{ TRUSTORE_PASSWORD }}"
    PASSPHRASE: "{{ PASSPHRASE }}"
  when: not file_stat.results[0].stat.exists or not file_stat.results[1].stat.exists
